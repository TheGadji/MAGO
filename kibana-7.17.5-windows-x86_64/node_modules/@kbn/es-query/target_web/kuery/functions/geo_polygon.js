import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _toArray from "@babel/runtime/helpers/toArray";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";

/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */
import { nodeTypes } from '../node_types';
import * as ast from '../ast';
export function buildNodeParams(fieldName, points) {
  var fieldNameArg = nodeTypes.literal.buildNode(fieldName);
  var args = points.map(function (point) {
    var latLon = "".concat(point.lat, ", ").concat(point.lon);
    return nodeTypes.literal.buildNode(latLon);
  });
  return {
    arguments: [fieldNameArg].concat(_toConsumableArray(args))
  };
}
export function toElasticsearchQuery(node, indexPattern) {
  var _indexPattern$fields, _geo_polygon;

  var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  var _node$arguments = _toArray(node.arguments),
      fieldNameArg = _node$arguments[0],
      points = _node$arguments.slice(1);

  var fullFieldNameArg = _objectSpread(_objectSpread({}, fieldNameArg), {}, {
    value: context !== null && context !== void 0 && context.nested ? "".concat(context.nested.path, ".").concat(fieldNameArg.value) : fieldNameArg.value
  });

  var fieldName = nodeTypes.literal.toElasticsearchQuery(fullFieldNameArg);
  var fieldList = (_indexPattern$fields = indexPattern === null || indexPattern === void 0 ? void 0 : indexPattern.fields) !== null && _indexPattern$fields !== void 0 ? _indexPattern$fields : [];
  var field = fieldList.find(function (fld) {
    return fld.name === fieldName;
  });
  var queryParams = {
    points: points.map(function (point) {
      return ast.toElasticsearchQuery(point, indexPattern, config, context);
    })
  };

  if (field !== null && field !== void 0 && field.scripted) {
    throw new Error("Geo polygon query does not support scripted fields");
  }

  return {
    geo_polygon: (_geo_polygon = {}, _defineProperty(_geo_polygon, fieldName, queryParams), _defineProperty(_geo_polygon, "ignore_unmapped", true), _geo_polygon)
  };
}