/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements. 
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.lens_bundle_jsonpfunction=window.lens_bundle_jsonpfunction||[]).push([[9],{74:function(t,e,n){"use strict";n.r(e),n.d(e,"getVisualizeGeoFieldMessage",(function(){return i})),n.d(e,"getResolvedDateRange",(function(){return o})),n.d(e,"containsDynamicMath",(function(){return c})),n.d(e,"getTimeZone",(function(){return l})),n.d(e,"getActiveDatasourceIdFromDoc",(function(){return d})),n.d(e,"getInitialDatasourceId",(function(){return f})),n.d(e,"getIndexPatternsIds",(function(){return g})),n.d(e,"getIndexPatternsObjects",(function(){return m}));var s=n(39),r=n(0),u=n(47),a=n.n(u);function i(t){return r.i18n.translate("xpack.lens.visualizeGeoFieldMessage",{defaultMessage:"Lens cannot visualize {fieldType} fields",values:{fieldType:t}})}const o=function(t){const{from:e,to:n}=t.getTime(),{min:s,max:r}=t.calculateBounds({from:e,to:n});return{fromDate:(null==s?void 0:s.toISOString())||e,toDate:(null==r?void 0:r.toISOString())||n}};function c(t){return t.includes("now")}function l(t){const e=t.get("dateFormat:tz");return"Browser"===e?a.a.tz.guess():e}function d(t){if(!t)return null;const[e]=Object.keys(t.state.datasourceStates);return e||null}const f=(t,e)=>e&&d(e)||Object.keys(t)[0]||null;function g({activeDatasources:t,datasourceStates:e}){const n=[];Object.entries(t).forEach((([t,s])=>{const{savedObjectReferences:r}=s.getPersistableState(e[t].state);n.push(...r)}));return Object(s.uniq)(n.filter((({type:t})=>"index-pattern"===t)).map((({id:t})=>t)))}async function m(t,e){const n=await Promise.allSettled(t.map((t=>e.get(t)))),s=n.filter((t=>"fulfilled"===t.status)),r=n.map(((e,n)=>t[n])).filter(((t,e)=>"rejected"===n[e].status));return{indexPatterns:s.map((t=>t.value)),rejectedIds:r}}}}]);